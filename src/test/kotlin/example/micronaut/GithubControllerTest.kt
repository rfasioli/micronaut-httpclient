package example.micronaut

import example.micronaut.model.GithubRelease
import io.micronaut.core.type.Argument
import io.micronaut.http.HttpRequest
import io.micronaut.http.HttpStatus
import io.micronaut.http.client.HttpClient
import io.micronaut.http.client.annotation.Client
import io.micronaut.test.extensions.junit5.annotation.MicronautTest
import jakarta.inject.Inject
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Test

@MicronautTest
class GithubControllerTest {

    @Inject
    @field:Client("/")
    lateinit var client: HttpClient

    @Test
    fun verifyGithubReleasesCanBeFetchedWithLowLevelHttpClient() {
        //when:
        val request: HttpRequest<Any> = HttpRequest.GET("/github/releases-lowlevel")
        val rsp = client.toBlocking().exchange(request,
                Argument.listOf(GithubRelease::class.java))

        //then: 'the endpoint can be accessed'
        assertEquals(HttpStatus.OK, rsp.status)
        assertNotNull(rsp.body())

        //when:
        val releases = rsp.body()

        //then:
        for (name in expectedReleases) {
            assertTrue(releases.stream().map(GithubRelease::name).anyMatch { anObject: String? -> name == anObject })
        }
    }

    @Test
    fun verifyGithubReleasesCanBeFetchedWithCompileTimeAutoGeneratedAtClient() {
        //when:
        val request: HttpRequest<Any> = HttpRequest.GET("/github/releases-lowlevel")
        val githubReleases = client.toBlocking().retrieve(request, Argument.listOf(GithubRelease::class.java))

        //then:
        for (name in expectedReleases) {
            assertTrue(githubReleases.stream()
                    .map(GithubRelease::name)
                    .anyMatch { anObject: String? -> name.equals(anObject) })
        }
    }

    companion object {
        private val expectedReleases = listOf("Micronaut 2.5.0", "Micronaut 2.4.4", "Micronaut 2.4.3")
    }

}